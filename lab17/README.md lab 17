2.1 Назва роботи:
Лабораторна робота №17: Генератори послідовностей чисел

2.2 Мета роботи:
Мета цієї лабораторної роботи полягає в розробці програми з використанням генераторів Python для генерації різноманітних послідовностей чисел. Очікувані результати включають реалізацію генераторів для стандартних та спеціалізованих послідовностей, таких як числа Фібоначчі, прості числа, послідовності для обхіду бінарних дерев та графів, арифметичні та геометричні прогресії тощо.

2.3 Опис завдання:
Створити програму, яка буде включати реалізацію наступних генераторів:

Генератори чисел:

Генератор чисел загального використання.
Генератор парних чисел.
Генератор непарних чисел.
Генератори послідовностей:

Генератор чисел Фібоначчі.
Генератор простих чисел.
Генератори чисел з арифметичних та геометричних прогресій.
Генератори обходу структур даних:

Генератори обходу бінарного дерева: префіксний, інфіксний та постфіксний.
Генератори обходу графа: в глибину та в ширину.
Інші спеціалізовані генератори:

Генератор ключів, значень та елементів словника.
Генератор рядків файлу та слів у файлі.
Генератор унікальних елементів списку.
Генератор послідовних степенів числа та факторіалів чисел.
2.4 Виконання роботи:
Для досягнення поставленої мети були реалізовані різноманітні генератори в мові програмування Python. Кожен генератор виконується за допомогою ключового слова yield, що дозволяє створювати ітератори для послідовного повернення значень без необхідності зберігати всі значення в пам'яті одразу.

Основні генератори числових послідовностей:
Генератор чисел загального використання (number_generator):

Цей генератор приймає послідовність чисел і повертає кожне число одне за одним через yield.
Генератор парних чисел (even_number_generator):

Починаючи з заданого start до end, цей генератор повертає лише парні числа за допомогою перевірки на залишок від ділення на 2.
Генератор непарних чисел (odd_number_generator):

Аналогічно до попереднього, цей генератор повертає лише непарні числа через перевірку на залишок від ділення на 2.
Основні генератори числових послідовностей:
Генератор чисел Фібоначчі (fibonacci_generator):

Використовується класичний підхід до генерації чисел Фібоначчі, де кожне наступне число є сумою двох попередніх чисел у послідовності.
Генератор простих чисел (prime_number_generator):

Перевіряється кожне число на простоту шляхом перебору всіх чисел до квадратного кореня заданого числа. Якщо число ділиться без остачі на будь-яке із цих чисел, воно не є простим.
Генератори обходу структур даних:
Обход бінарного дерева:

Для бінарного дерева реалізовані три основні типи обходу: префіксний (pre_order_traversal), інфіксний (in_order_traversal) та постфіксний (post_order_traversal). Вони рекурсивно перебирають вузли дерева в певному порядку.
Обход графа:

Для обходу графа реалізовані два основні методи: в глибину (dfs_traversal) та в ширину (bfs_traversal). Вони використовують стек та чергу відповідно для відслідковування відвіданих вершин.
Інші спеціалізовані генератори:
Генератори для роботи зі словниками та файлами:

Включають генератори ключів, значень та елементів словника (dict_keys_generator, dict_values_generator, dict_items_generator), а також генератори рядків файлу та слів у файлі (file_lines_generator, file_words_generator).
Інші спеціалізовані генератори:

Включають генератор унікальних елементів списку (unique_elements_generator), генератор послідовних степенів числа (powers_of_two_generator, powers_of_base_generator), генератори квадратів, кубів та факторіалів чисел (squares_generator, cubes_generator, factorials_generator).
Приклад використання:
# Приклад використання генераторів
for number in number_generator(range(1, 6)):
    print(number)

for even_number in even_number_generator(1, 10):
    print(even_number)

for fibonacci_number in itertools.islice(fibonacci_generator(), 10):
    print(fibonacci_number)

for prime in prime_number_generator(20):
    print(prime)

# Інші приклади використання аналогічні та можуть бути виконані для інших генераторів.
Ці генератори можуть бути використані для широкого спектру завдань, де потрібна ефективна обробка послідовностей чисел, обход структур даних або генерація унікальних значень. Вони покращують продуктивність програми і зменшують використання пам'яті, оскільки не потребують зберігання всіх значень у пам'яті одразу.
2.5 Результати:
Отримані результати показують ефективність та універсальність генераторів у створенні різноманітних числових послідовностей та обході структур даних. Нижче наведено приклади використання кожного з генераторів:

python
Копіювати код
# Приклад використання генераторів
for number in number_generator(range(1, 6)):
    print(number)

for even_number in even_number_generator(1, 10):
    print(even_number)

for fibonacci_number in itertools.islice(fibonacci_generator(), 10):
    print(fibonacci_number)

for prime in prime_number_generator(20):
    print(prime)

# Інші приклади використання аналогічні та можуть бути виконані для інших генераторів.
2.6 Висновки:
В ході лабораторної роботи було досягнуто поставлену мету, а саме, реалізація різноманітних генераторів числових послідовностей та обходу структур даних. Виявлені проблеми були успішно вирішені шляхом правильної імплементації генераторів та їх використання в різних контекстах.

2.7 Інструкції з запуску:
Для запуску програми потрібно мати встановлену версію Python 3.x. Додаткові бібліотеки не потрібні, оскільки використовуються стандартні бібліотеки Python. Запуск виконується через виклик відповідних функцій генераторів з вхідними параметрами, де це необхідно.
