2.1 Назва роботи:
Лабораторна робота №14: Управління завданнями з використанням Python

2.2 Мета роботи:
Метою цієї лабораторної роботи є створення програми для управління задачами з використанням класів і методів мови програмування Python. Очікуваним результатом є розробка системи для додавання, видалення, оновлення та моніторингу завдань, збереження їх у файлі та завантаження з файлу.

2.3 Опис завдання:
Вам потрібно реалізувати два класи: Task і Schedule.

Клас Task:
Атрибути:

title: заголовок завдання.
description: опис завдання.
due_date: дата закінчення завдання.
status: статус завдання (за замовчуванням "Pending").
priority: пріоритет завдання (за замовчуванням "Medium").
notes: примітки до завдання.
duration: тривалість виконання завдання.
recurrence: частота повторення завдання (за потреби).
Методи:

is_due_today(): перевіряє, чи має завдання бути виконане сьогодні.
to_dict(): повертає представлення завдання у вигляді словника.
from_dict(data): статичний метод для створення об'єкту завдання зі словника.
__repr__(): представлення об'єкту у вигляді рядка.
Клас Schedule:
Атрибути:

tasks: список завдань.
history: історія змін у завданнях.
Методи:

Додавання (add_task()), видалення (remove_task()), отримання (get_task()) та оновлення (update_task()) завдання.
Список прострочених (list_overdue_tasks()) та завдань, що мають бути виконані сьогодні (list_tasks_due_today()).
Сортування завдань за датою закінчення (sort_tasks_by_due_date()).
Позначення завдання як виконаного (mark_as_completed()) і список виконаних завдань (list_completed_tasks()).
Пошук завдання за ключовим словом (find_task_by_keyword()).
Очистка виконаних завдань (clear_completed_tasks()).
Збереження (save_to_file()) та завантаження (load_from_file()) даних у/з файл.
Інші функції для роботи з завданнями, такі як перевірка дедлайнів (check_deadlines()), обчислення відсотку завершення (completion_percentage()), список всіх завдань (list_all_tasks()), список повторюваних завдань (list_recurring_tasks()), встановлення нагадування (set_reminder()), історія змін завдань (task_history()), тощо.
2.4 Виконання роботи:
Для виконання лабораторної роботи створимо програму для управління завданнями з використанням класів Task і Schedule.

Кроки:
Створення класу Task:

Створимо клас Task, який буде представляти окреме завдання з такими атрибутами, як title, description, due_date, status, priority, notes, duration, recurrence.
Реалізуємо методи для перевірки чи завдання має бути виконане сьогодні (is_due_today()), перетворення об'єкта у словник (to_dict()), створення об'єкта зі словника (from_dict(data)), а також метод __repr__() для зручного виводу об'єкта.
Створення класу Schedule:

Створимо клас Schedule, який буде відповідати за управління списком завдань (tasks) і історією змін (history).
Реалізуємо методи для додавання (add_task()), видалення (remove_task()), отримання (get_task()), оновлення (update_task()) та інші, які дозволяють працювати з завданнями.
Додамо методи для фільтрації і сортування завдань, а також для збереження (save_to_file()) і завантаження (load_from_file()) даних.
Приклади використання:

Додамо приклади використання класів Task і Schedule, які включають додавання, видалення, оновлення і моніторинг завдань, а також збереження і завантаження з файлу.
Приклад використання:
if __name__ == "__main__":
    # Створення завдань
    task1 = Task(title="Buy groceries", description="Milk, Bread, Eggs", due_date=date.today() - timedelta(days=1))
    task2 = Task(title="Submit assignment", description="Math assignment", due_date=date.today() + timedelta(days=2))

    # Створення розкладу
    schedule = Schedule()

    # Додавання завдань до розкладу
    schedule.add_task(task1)
    schedule.add_task(task2)

    # Приклади використання методів
    print(schedule.list_overdue_tasks())    # Список прострочених завдань
    print(schedule.list_tasks_due_today())  # Список завдань, які мають бути виконані сьогодні
    print(schedule.sort_tasks_by_due_date())  # Сортування завдань за датою

    # Оновлення завдання
    schedule.update_task("Buy groceries", description="Milk, Bread, Eggs, Cheese", due_date=date(2024, 5, 26))

    # Позначення завдання як виконаного
    schedule.mark_as_completed("Buy groceries")
    print(schedule.get_task("Buy groceries").status)  # Перевірка статусу завдання

    # Збереження і завантаження з файлу
    schedule.save_to_file("schedule.txt")
    schedule.load_from_file("schedule.txt")
    print(schedule.list_all_tasks())  # Вивід всіх завдань після завантаження з файлу
2.5 Результати:
Після виконання програми отримаємо очікувані результати для кожного з методів класів Task і Schedule. Наприклад, списки прострочених завдань, завдань, які мають бути виконані сьогодні, сортування завдань за датою та інші операції з управління завданнями.

2.6 Висновки:
У результаті виконання лабораторної роботи було успішно реалізовано програму для управління завданнями з використанням класів і методів мови програмування Python. Програма включає різноманітні функції для додавання, видалення, оновлення і моніторингу завдань, а також можливість зберігати і завантажувати дані з файлу. Проблеми, що виникали, були вирішені шляхом правильної реалізації методів для управління списком завдань і їх даними.

2.7 Інструкції з запуску:
Для запуску програми необхідно мати встановлену версію Python 3.x.
Не потрібні додаткові бібліотеки для виконання цієї програми.

Команда для запуску програми знаходиться у файлі main.py.
