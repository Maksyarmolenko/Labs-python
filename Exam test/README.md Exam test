2.3 Опис завдання:
Лабораторна робота складається з декількох завдань, які вимагають створення класів, методів та використання різних аспектів ООП. Кожне завдання описане нижче:

Клас Person:

Створити клас Person, який має атрибути first_name, last_name та age.
Реалізувати метод full_name(), який повертає повне ім'я особи.
Клас Graph:

Створити клас Graph, який використовує представлення графа через список суміжностей.
Реалізувати методи add_vertex(vertex) для додавання вершини та add_edge(vertex1, vertex2) для додавання ребра між вершинами.
Написати методи dfs(start_vertex) та bfs(start_vertex) для обходу графа в глибину та в ширину відповідно.
Клас RegexChecker:

Створити клас RegexChecker, який має метод check_email(email).
Метод check_email(email) перевіряє, чи відповідає рядок email паттерну валідного email адреси за допомогою регулярних виразів.
Кожне завдання має бути реалізовано у відповідному класі з відповідними методами. Після реалізації кожного класу та його методів необхідно впевнитися в їх коректній роботі та продемонструвати їх застосування в конкретних прикладах.
2.4 Виконання роботи:
Для досягнення поставленої мети було створено програму на мові програмування Python, що включає в себе різноманітні класи та функції, описані нижче.

Основні класи та їх функціональність:
Клас Person (Task 1-2):

Клас представляє людину з властивостями first_name, last_name і age.
Метод full_name() повертає повне ім'я людини.
Клас Graph (Task 3, 9):

Клас для представлення графа через список суміжностей.
Методи add_vertex() та add_edge() додають вершини та ребра в граф.
Методи dfs() та bfs() реалізують обходи графа в глибину та в ширину відповідно.
Клас RegexChecker (Task 4):

Клас для перевірки правильності формату email за допомогою регулярних виразів.
Класи для спадкування (Task 5-6):

Shape є базовим класом, який представляє геометричну фігуру з властивістю color.
Circle та Square успадковують Shape і додають свої унікальні властивості radius та side_length відповідно.
Клас Vehicle є базовим для транспортних засобів, а класи Car та Bicycle успадковують його і реалізують метод move().
Клас BankAccount (Task 7):

Клас для управління банківським рахунком з приватними властивостями __account_number та __balance.
Методи deposit() та withdraw() забезпечують зміну балансу рахунку з урахуванням перевірок.
Абстрактний клас Employee та його підкласи (Task 8):

Клас Employee є абстрактним і має абстрактний метод calculate_salary().
Підкласи SalariedEmployee та HourlyEmployee успадковують Employee і реалізують конкретні розрахунки зарплати.
Клас RegexExtractor (Task 10):

Клас для вилучення телефонних номерів з тексту за допомогою регулярних виразів.
Класи для множинного спадкування (Task 11):

Класи A та B мають свої методи, а клас C успадковує їх обидва і реалізує метод, який викликає методи своїх батьків.
Клас Calculator (Task 12):

Клас для виконання операцій калькулятора, включаючи перевірку ділення на нуль.
Клас FileManager (Task 13-14):

Клас для зчитування, запису та додавання вмісту у файли, а також контекстний менеджер FileOpener для безпечного відкриття та закриття файлів.
Клас MetaClassExample та MyClass (Task 15):

MetaClassExample є метакласом, що додає атрибут class_name до класу, який його успадковує.
MyClass є прикладом класу, який використовує MetaClassExample як метаклас.
2.5 Результати:
Програма була успішно реалізована згідно з усіма вказаними завданнями.
Для кожного класу були створені відповідні методи, що демонструють їх функціонал.
Використані регулярні вирази для перевірки формату email та вилучення телефонних номерів з тексту.
2.6 Висновки:
Всі поставлені цілі лабораторної роботи були досягнуті.
Проблеми виникали в період розробки, особливо при реалізації класів зі спадкуванням та абстрактними класами, але вони були успішно вирішені шляхом адекватного використання концепцій ООП.
Застосування регулярних виразів для перевірки та обробки даних також виявилося ефективним та зручним.
2.7 Інструкції з запуску:
Для запуску програми необхідно мати встановлений Python версії 3.x. Використовуйте будь-яке інтегроване середовище розробки (IDE), наприклад PyCharm або Visual Studio Code.

Завантажте код програми з репозиторію на GitHub.
Відкрийте основний файл програми (наприклад, main.py).
Запустіть файл програми за допомогою вбудованої консолі вашої IDE або командою python main.py.
Відстежуйте результати виконання програми у консолі або використовуйте виведення для відображення результатів роботи класів та їх методів.
Ці інструкції забезпечать коректну роботу програми та дозволять вам оцінити її функціональність та результати виконання кожного завдання лабораторної роботи.
