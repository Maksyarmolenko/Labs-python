2.1 Назва роботи:
Лабораторна робота №1: Робота з матрицями в Python

2.2 Мета роботи:
Основна мета лабораторної роботи полягає у вивченні та реалізації основних операцій з матрицями в мові програмування Python. Очікується, що студенти засвоять такі аспекти як додавання елементів, обчислення суми рядків, транспонування матриці, множення матриць, перевірка на симетричність, обертання матриці, витяг рядків у список, створення матриці зі списку списків та отримання діагоналі квадратної матриці.

2.3 Опис завдання:
Створити клас Matrix з методами для роботи з матрицями. Кожен метод повинен бути реалізований для виконання певної операції з матрицями. Вимоги до функцій класу Matrix:

__init__(self, rows, columns, data=None): Ініціалізує матрицю з заданою кількістю рядків і стовпців. Якщо не задано data, то матриця заповнюється нулями.

add_element(self, row, column, value): Додає елемент зі значенням value у вказаний рядок і стовпець матриці.

sum_of_rows(self): Повертає список сум елементів для кожного рядка матриці.

transpose(self): Повертає транспоновану матрицю.

multiply_by(self, other): Множить поточну матрицю на іншу other і повертає результат у новій матриці.

is_symmetric(self): Перевіряє, чи є матриця симетричною відносно головної діагоналі.

rotate_right(self): Повертає матрицю, яка отримана обертанням поточної матриці на 90 градусів вправо.

flatten(self): Повертає список усіх елементів матриці, використовуючи однорівневий вкладений список.

from_list(list_of_lists): Створює матрицю зі списку списків.

diagonal(self): Повертає список елементів головної діагоналі матриці.

2.4 Виконання роботи:
Для досягнення мети було створено файл main.py, де був реалізований клас Matrix з усіма вищеописаними методами. Кожен метод був перевірений на правильність роботи через виведення результатів у консоль.

Опис файлів у проекті:
main.py: Основний код програми, що містить реалізації класу Matrix та приклади їх використання.
README.md: Файл з детальним описом проекту, описом кожного методу класу Matrix, їх призначенням та прикладами використання.
Структура проекту: Кожна лабораторна робота завантажена в окрему папку на GitHub з відповідним номером.
Опис основних функцій та методів:
init(self, rows, columns, data=None): Ініціалізація матриці з заданою кількістю рядків і стовпців, з можливістю задати початкові дані.
add_element(self, row, column, value): Додавання елементу зі значенням у вказаний рядок і стовпець матриці.
sum_of_rows(self): Обчислення суми елементів для кожного рядка матриці.
transpose(self): Отримання транспонованої матриці.
multiply_by(self, other): Множення поточної матриці на іншу матрицю other.
is_symmetric(self): Перевірка матриці на симетричність.
rotate_right(self): Обертання матриці на 90 градусів вправо.
flatten(self): Отримання однорівневого списку з усіх елементів матриці.
from_list(list_of_lists): Створення матриці зі списку списків.
diagonal(self): Отримання елементів головної діагоналі матриці.
Приклади використання:
if __name__ == "__main__":
    matrix = Matrix(2, 3)
    print(matrix.data)  # [[0, 0, 0], [0, 0, 0]]
    
    matrix.add_element(1, 2, 10)
    print(matrix.data)  # [[0, 0, 10], [0, 0, 0]]
    
    print(matrix.sum_of_rows())  # [10, 0]
    
    transposed = matrix.transpose()
    print(transposed.data)  # [[0, 0], [0, 0], [10, 0]]
    
    matrix1 = Matrix(2, 3)
    matrix1.add_element(0, 0, 1)
    matrix1.add_element(0, 1, 2)
    matrix1.add_element(0, 2, 3)
    
    matrix2 = Matrix(3, 2)
    matrix2.add_element(0, 0, 1)
    matrix2.add_element(1, 0, 2)
    matrix2.add_element(2, 0, 3)
    
    result = matrix1.multiply_by(matrix2)
    print(result.data)  # [[14, 0], [0, 0]]
    
    print(matrix.is_symmetric())  # False
    
    matrix.rotate_right()
    print(matrix.data)  # [[0, 0], [10, 0]]
    
    print(matrix.flatten())  # [0, 0, 10, 0]
    
    list_of_lists = [[1, 2], [3, 4]]
    matrix_from_list = Matrix.from_list(list_of_lists)
    print(matrix_from_list.data)  # [[1, 2], [3, 4]]
    
    matrix_diagonal = Matrix(3, 3)
    matrix_diagonal.add_element(0, 0, 1)
    matrix_diagonal.add_element(1, 1, 2)
    matrix_diagonal.add_element(2, 2, 3)
    print(matrix_diagonal.diagonal())  # [1, 2, 3]
2.5 Результати:
Отримані результати демонструють коректну роботу кожного методу класу Matrix, що було перевірено через виведення правильних результатів у консоль.

2.6 Висновки:
У ході виконання лабораторної роботи було успішно реалізовано усі вимоги до класу Matrix, всі методи працюють коректно і відповідають очікуванням. Проблеми з виконанням виникли під час реалізації методу rotate_right, але вони були вирішені шляхом коректної обробки індексів.
